function updateBallPosition() {
    if (!ball.visible) return;
    // Démarrez le mouvement de la balle lors de la première collision avec la raquette
    //console.log(ball.dy, ball.dx, ball.y, paddle.y - ball.radius);
    if (ball.dy === 0 && ball.dx === 0 && ball.y === paddle.y - ball.radius) {
        console.log(ball.dy, ball.dx, ball.y, paddle.y - ball.radius)
        if (ball.x > paddle.x && ball.x < paddle.x + paddle.width) {
            ball.velocity = 1; // Réinitialisez la vitesse si nécessaire
            ball.dy = -2 * ball.velocity; // Définissez les valeurs initiales pour commencer le mouvement
            ball.dx = 8 * ((ball.x - (paddle.x + paddle.width / 2)) / paddle.width);
        }
    }

    // Collision avec les bords latéraux du canvas
    if (ball.x + ball.dx > canvas.width - ball.radius || ball.x + ball.dx < ball.radius) {
        ball.dx = -ball.dx;
    }

    // Collision avec la raquette, en prenant en compte la position verticale actuelle de la balle
    if (ball.dy > 0 && ball.y < paddle.y - ball.radius && ball.y + ball.dy >= paddle.y - ball.radius) {
        if (ball.x > paddle.x && ball.x < paddle.x + paddle.width) {
            ball.dy = -ball.dy * ball.velocity; // Inverse la direction verticale de la balle et applique l'accélération
            ball.dx = 8 * ((ball.x - (paddle.x + paddle.width / 2)) / paddle
                .width); // Applique l'accélération horizontale
            // Pas besoin de réajuster `ball.y` ici car l'ajustement est basé sur la condition de collision
        }
    }

    // Gère la collision avec le haut du canvas ou la transmission de la balle
    if (ball.y < 0) {
        ball.visible = false;
        sendData();
        return; // Arrête la mise à jour de la position pour éviter les mouvements inattendus

    }

    // Rebond sur le bas du canvas
    if (ball.y + ball.dy > canvas.height - ball.radius) {
        // Supposons que le but inférieur appartient à l'hôte
        if (ball.x > canvas.width / 2 - goal.width / 2 && ball.x < canvas.width / 2 + goal.width / 2) {
            if (userRole === 'hôte') {
                score.client++;
            } else if (userRole === 'client') {
                score.host++;
            }
            resetBallPosition();
            sendData();
        } else {
            ball.dy = -ball.dy;
        }
    }

    ball.x += ball.dx;
    ball.y += ball.dy;
}